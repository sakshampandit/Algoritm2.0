#Binary Search in a rotated array using Quicksort
def pivotedBinarySearch(arr, n, key):

	pivot = Partition(arr, 0, n-1);


	if pivot == -1:
		return Search(arr, 0, n-1, key);

	if arr[pivot] == key:
		return pivot
	if arr[0] <= key:
		return Search(arr, 0, pivot-1, key);
	return Search(arr, pivot + 1, n-1, key);


def Partition(arr, low, high):

	if high < low:
		return -1
	if high == low:
		return low
	

	mid = int((low + high)/2)
	
	if mid < high and arr[mid] > arr[mid + 1]:
		return mid
	if mid > low and arr[mid] < arr[mid - 1]:
		return (mid-1)
	if arr[low] >= arr[mid]:
		return Partition(arr, low, mid-1)
	return Partition(arr, mid + 1, high)


def Search(arr, low, high, key):

	if high < low:
		return -1
		

	mid = int((low + high)/2)
	
	if key == arr[mid]:
		return mid
	if key > arr[mid]:
		return Search(arr, (mid + 1), high,
											key);
	return Search(arr, low, (mid -1), key);



a = [5, 6, 7, 8, 9, 10, 1, 2, 3]
n = len(a)
key = 3
print("Index of the element is : ",
	pivotedBinarySearch(a, n, key))

